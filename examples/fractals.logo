to star :size :small
  if :size < :small [stop]
  repeat 5 [fd :size star :size * 0.3 :small rt 144]
end

to flake :size :small :angle
  if :size < :small [stop]
  setpc modulo (round :size) 15
  repeat 12 [fd :size flake :size * 0.3 :small :angle rt :angle]
end

to tree :len :ang :st
    if :len < :st [stop]  ; halt when branch length is less than st
    fd :len
    lt :ang
    tree :len / 2 :ang :st ; recursive call
    rt :ang
    tree :len / 2 :ang :st ; recursive call
    rt :ang
    tree :len / 2 :ang :st ; recursive call
    lt :ang
    bk :len
end


to doit
   seth random 360
   pu
   bk 100
   pc random 16 pd
   sierp 800 ; screen size
end

to rtriangle :size
   fd :size
   rt 135
   fd (sqrt 2)* :size
   rt 135
   fd :size
   rt 90
end

to hole :size
   fd :size / 2
   rt 90
   fd :size / 2
   rt 90
   rtriangle :size / 2
   pu
   rt 45
   fd :size / 4
   pd
;   fill
   bk :size / 4
   rt 45
   fd :size / 2
   rt 90
   bk :size / 2
end

to sierp :size
   rtriangle :size
   hole :size
   if :size > 5 [sierp :size / 2]
   fd :size / 2
   if :size > 5 [sierp :size / 2]
   bk :size / 2
   rt 90
   fd :size / 2
   lt 90
   if :size > 5 [sierp :size / 2]
   lt 90
   fd :size / 2
   rt 90
end


to sierpinski
  pd
  seth 0
  rt 30
  draw_shape 400 8
end

to draw_shape :size :level
  if :level < 1 [stop]             
  repeat 3 [ draw_shape (product :size .5) (difference :level 1)
             fd :size
             rt 120]
end

to curve
  pd
  seth 0
  rt 30
  curve_shape 150 6.5
end

to curve_shape :size :level
  if :level < 1 [stop]                  ; stopping rule

  repeat 4 [
    fd 0.75 * :size
    rt 180
    curve_shape :size / 2 :level - 1
    rt 180
    fd 0.25 * :size
    rt 90
  ]
end


;;;;;;;;;;;;;;;;;;;;;;;;;; For multiple turtles ;;;;;;;;;;;;;;;;;;;;;
;; Original code
;to doit2
;set.up.triangle
;t1, setc "red
;t2, setc "blue
;t3, setc "green
;forever [step]
;end
;to set.up.triangle
;t1, setpos [-250 -165]
;t2, setpos [250 -165]
;t3, setpos [0 180]
;t4, pu st
;end

;to step
;   make "random.vertex ((random 3) + 1)
;   make "random_vertex_turtle word "t :random.vertex
;   talkto :random_vertex_turtle
;
;   ; setc color + 1 ; change the colour of the active vertex
;   make "p pos
;   talkto "t4
;   towards :random_vertex_turtle
;   if :random_vertex_turtle = "t1 [setc "red]
;   if :random_vertex_turtle = "t2 [setc "blue]
;   if :random_vertex_turtle = "t3 [setc "green]
;
;
;   make "q pos
;   make "distance sqrt((power ((first :p) - (first :q)) 2) +    (power ((last :p) - (last :q)) 2))
;
;   fd 0.5 * :distance
;   pd fd 0
;   pu
;end

;;; New code using multiple turtle facility in lisp logo.

make "blue 1
make "green 2
make "red 4

TO set.up.triangle
   clt

   hatch "t1
   tell "t1
   setpc :red
   ht pu setpos [-250 -165] pd

   hatch "t2
   tell "t2
   setpc :blue
   ht pu setpos [250 -165] pd

   hatch "t3
   tell "t3
   setpc :green
   ht pu setpos [0 180] pd

   hatch "t4
   tell "t4
   st
   END


TO distance :pos1 :pos2
   output sqrt (power (first :pos1) - (first :pos2) 2) + (power (last :pos1) - (last :pos2) 2)
   END  

TO fstep
   make "random_vertex (random 3) + 1
   make "random_vertex_turtle word "t :random_vertex
   make "p ask :random_vertex_turtle "position

   tell "t4

   setpc ask :random_vertex_turtle "pencolor

   setheading towards :p
   make "q position
   make "d distance :p :q

   pu fd 0.5 * :d
   pd draw-point
   END

TO doit2
   cs
   set.up.triangle
;   forever [fstep]
   repeat 100000 [fstep]
   END
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to x :p  
   output first :p  
end

to y :p 
   ;output item 2 :p 
   output first butfirst :p
end

to gscale
output 500
end


to scale_triangle :p 
   output se (x :p) * gscale - gscale / 2 (y :p) * gscale - gscale / 2
end

to triangle :p1 :p2 :p3
   pu 
   setpos scale_triangle :p1 
   pd
   setpos scale_triangle :p2
   setpos scale_triangle :p3
   setpos scale_triangle :p1
end

to rule :n :p
   if :n = 1 [output se (x :p) / 2 (y :p) / 2]
   if :n = 2 [output se (x :p) / 2 + 0.5 (y :p) / 2]
   if :n = 3 [output se (x :p) / 2 + 0.25 (y :p) / 2 + 0.5]
end

to ifs :p1 :p2 :p3 :level
   if :level = 0 [triangle :p1 :p2 :p3 stop]
   ifs rule 1 :p1 rule 1 :p2 rule 1 :p3 :level - 1
   ifs rule 2 :p1 rule 2 :p2 rule 2 :p3 :level - 1
   ifs rule 3 :p1 rule 3 :p2 rule 3 :p3 :level - 1
end


to gg
   cs ht
   IFS [0 0] [1 0] [0.5 1] 0
   wait 60
   IFS [0 0] [1 0] [0.5 1] 1
   wait 60
   IFS [0 0] [1 0] [0.5 1] 2
   wait 60
   IFS [0 0] [1 0] [0.5 1] 3
   wait 60
   IFS [0 0] [1 0] [0.5 1] 4
   wait 60
   IFS [0 0] [1 0] [0.5 1] 5
   wait 60
   IFS [0 0] [1 0] [0.5 1] 6
   wait 60
   IFS [0 0] [1 0] [0.5 1] 7
   wait 60
   IFS [0 0] [1 0] [0.5 1] 8
end
